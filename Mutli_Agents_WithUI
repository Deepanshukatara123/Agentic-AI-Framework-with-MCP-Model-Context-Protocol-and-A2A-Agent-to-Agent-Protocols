import os
from datetime import datetime, timedelta
from azure.storage.blob import BlobServiceClient, generate_blob_sas, BlobSasPermissions
from openai import AzureOpenAI
import streamlit as st

# === Configuration Variables ===
OPENAI_API_KEY = "[openaikey]"
OPENAI_API_BASE = "[openaiurl]"
OPENAI_API_VERSION = "2024-02-01"
OPENAI_DEPLOYMENT_NAME = "gpt-4o"

STORAGE_ACCOUNT_NAME = "[storageaccountname]"
STORAGE_ACCOUNT_KEY = "[storageaccountkey]"
BLOB_CONTAINER = "agent-outputs"
AZURE_STORAGE_CONNECTION_STRING = (
    f"DefaultEndpointsProtocol=https;"
    f"AccountName={STORAGE_ACCOUNT_NAME};"
    f"AccountKey={STORAGE_ACCOUNT_KEY};"
    f"EndpointSuffix=core.windows.net"
)

# === OpenAI Client Setup ===
client = AzureOpenAI(
    api_key=OPENAI_API_KEY,
    api_version=OPENAI_API_VERSION,
    azure_endpoint=OPENAI_API_BASE,
)

def search_with_bing(query: str) -> str:
    st.info("üîç ContentCollectionAgent: Searching Bing...")
    return f"""Here‚Äôs a curated list of insights found via Bing for: {query}.

- Insight 1: Azure AI Agent Service enables multi-agent orchestration.
- Insight 2: Bing Grounding allows agents to access real-time knowledge.
- Insight 3: Agents can extend functionality by integrating with AutoGen or Semantic Kernel."""

def write_blog(topic: str, outline: str, bing_results: str) -> str:
    st.info("üìñ WriterAgent: Generating blog with GPT...")
    prompt = f"""You are a technical blog writer. Use the topic, outline, and Bing search content below to write a detailed blog post.

Topic: {topic}

Outline: 
{outline}

Bing Content:
{bing_results}

Write a professional, well-structured blog post with sections and a conclusion.
"""
    response = client.chat.completions.create(
        model=OPENAI_DEPLOYMENT_NAME,
        messages=[
            {"role": "system", "content": "You are a professional technical writer."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.7
    )
    return response.choices[0].message.content

def upload_to_blob_with_sas(filename: str, content: str) -> str:
    st.info("üíæ SaveAgent: Uploading blog to Azure Blob Storage...")

    blob_service_client = BlobServiceClient.from_connection_string(AZURE_STORAGE_CONNECTION_STRING)
    container_client = blob_service_client.get_container_client(BLOB_CONTAINER)

    try:
        container_client.create_container()
    except Exception:
        pass  # already exists

    blob_client = container_client.get_blob_client(filename)
    blob_client.upload_blob(content, overwrite=True)

    sas_token = generate_blob_sas(
        account_name=STORAGE_ACCOUNT_NAME,
        container_name=BLOB_CONTAINER,
        blob_name=filename,
        account_key=STORAGE_ACCOUNT_KEY,
        permission=BlobSasPermissions(read=True),
        expiry=datetime.utcnow() + timedelta(days=7)
    )

    blob_url = f"https://{STORAGE_ACCOUNT_NAME}.blob.core.windows.net/{BLOB_CONTAINER}/{filename}?{sas_token}"
    return f"‚úÖ The blog has been saved as `{filename}`.\n[Download {filename}]({blob_url})"

# === Streamlit UI ===
st.title("Azure Multi-Agent Blog Generator")

with st.form("blog_form"):
    topic = st.text_input("üìù Enter the blog topic:")
    outline = st.text_area("üìë Enter the blog outline:")
    submitted = st.form_submit_button("Generate Blog")

if submitted:
    if not topic or not outline:
        st.error("Please provide both a topic and an outline.")
    else:
        bing_results = search_with_bing(topic)
        st.success("Bing search complete.")
        st.write(bing_results)

        blog_content = write_blog(topic, outline, bing_results)
        st.success("Blog generated by GPT.")
        st.markdown(blog_content)

        filename = f"{datetime.utcnow().strftime('%y%m%d')}_{topic.replace(' ', '_').lower()}.copilot.txt"
        result = upload_to_blob_with_sas(filename, blog_content)
        st.success("Blog uploaded to Azure Blob Storage.")
        st.markdown(result)
